<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.1" created="2011-03-16 08:50" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>amfPHP Documentation</title>
	<link>http://localhost:8888/amfphpdoc</link>
	<description>Just another WordPress site</description>
	<pubDate>Wed, 16 Mar 2011 08:50:08 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://localhost:8888/amfphpdoc</wp:base_site_url>
	<wp:base_blog_url>http://localhost:8888/amfphpdoc</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>a</wp:author_login><wp:author_email>ariel.publique@gmail.com</wp:author_email><wp:author_display_name><![CDATA[a]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.1</generator>

	<item>
		<title>Sample Page</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=2</link>
		<pubDate>Tue, 15 Mar 2011 16:44:32 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[This is an example page. It's different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:

<blockquote>Hi there! I'm a bike messenger by day, aspiring actor by night, and this is my blog. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin' caught in the rain.)</blockquote>

...or something like this:

<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickies to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>

As a new WordPress user, you should go to <a href="http://localhost:8888/amfphpdoc/wp-admin/">your dashboard</a> to delete this page and create new pages for your content. Have fun!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2011-03-15 16:44:32</wp:post_date>
		<wp:post_date_gmt>2011-03-15 16:44:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sample-page</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Home</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=5</link>
		<pubDate>Tue, 15 Mar 2011 16:50:12 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=5</guid>
		<description></description>
		<content:encoded><![CDATA[This is the documentation for the amfPHP project. In these pages you will find a presentation of the project, instructions on how to use it, and more advanced documentation on how to extend it.

Table Of Contents

&lt;generated&gt;

&nbsp;

&lt;bit about concept/ and contributing&gt;

&lt;forums&gt; <a href="http://sourceforge.net/projects/amfphp/forums">http://sourceforge.net/projects/amfphp/forums</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2011-03-15 16:50:12</wp:post_date>
		<wp:post_date_gmt>2011-03-15 16:50:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>home</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introduction</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=7</link>
		<pubDate>Tue, 15 Mar 2011 16:53:38 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=7</guid>
		<description></description>
		<content:encoded><![CDATA[The amfPHP project is designed to be a resource for <a href="http://www.adobe.com/products/flash/">Flash</a>, <a href="http://www.adobe.com/products/flex/">Flex</a>, and <a href="http://www.adobe.com/devnet/air/">Air</a> developers. The documentation for this project assumes that  you have an understanding of object oriented programming in <a href="http://php.net/">PHP</a> and <a href="http://www.adobe.com/devnet/actionscript/articles/oop_as3.html">Action Script</a>.

&lt;general explanation on what amfPHP is for&gt;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2011-03-15 16:53:38</wp:post_date>
		<wp:post_date_gmt>2011-03-15 16:53:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introduction</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Installing amfPHP</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=13</link>
		<pubDate>Tue, 15 Mar 2011 17:05:29 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[To use amfPHP, download it <a href="http://sourceforge.net/projects/amfphp/">here</a> and then install it on your web server online or on your computer (local).

To install amfPHP locally, you need a server which is capable to run on your operating system.
For information, there are several web servers that you can download for free.

If this is all new to you, you will find further details of the installation and solutions for problems in the Silex documentation which will walk you through server issues.

<a href="http://community.silexlabs.org/silex/help/?page_id=21">http://community.silexlabs.org/silex/help/?page_id=21</a>

Once you have a PHP capable server up and running, just unzip amfPHP in it. There are no further steps.

<em><strong> </strong></em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2011-03-15 17:05:29</wp:post_date>
		<wp:post_date_gmt>2011-03-15 17:05:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>installing-amfphp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Testing amfPHP</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=19</link>
		<pubDate>Tue, 15 Mar 2011 17:39:26 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=19</guid>
		<description></description>
		<content:encoded><![CDATA[In the "Services" folder of amfphp, you should see a file  "MirrorService".Â  This is an example service. If you open it you will  see that it simply consists of a class with two methods,  "returnOneParam", and "returnSum". You can use this service to do a few  tests, and get a feel for what you can do with amfphp.
The simplest way to test amfphp is to open the gateway with your  browser. There you should see an error saying that you have to choose a  service.

&nbsp;

TODO once QuickServiceDebug finished]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2011-03-15 17:39:26</wp:post_date>
		<wp:post_date_gmt>2011-03-15 17:39:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testing-amfphp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Data Types </title>
		<link>http://localhost:8888/amfphpdoc/?page_id=21</link>
		<pubDate>Tue, 15 Mar 2011 17:42:16 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[Not sure if this is useful yet. TODO at a later stage]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2011-03-15 17:42:16</wp:post_date>
		<wp:post_date_gmt>2011-03-15 17:42:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>data-types</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Class Mapping</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=23</link>
		<pubDate>Tue, 15 Mar 2011 17:42:37 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[TODO at a later stage]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2011-03-15 17:42:37</wp:post_date>
		<wp:post_date_gmt>2011-03-15 17:42:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>class-mapping</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Security</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=26</link>
		<pubDate>Tue, 15 Mar 2011 17:46:33 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>amfphp and security</h3>
Securing an amfPHP project is not any different from securing any  other php installation. Contrarily to what most people believe, amfPHP projects are neither more or less secure than any other php projects.
<h3>Debunking two myths</h3>
The first myth is that Flash Remoting is inherently more secure  than standard HTML apps since Remoting data is sent as a binary stream,  and therefore it's harder to 'hack' into an amfPHP installation.  Creating arbitrary AMF packets is not any harder or easier than sending  custom POST data, and in fact it can be done with exactly the same tools  (cURL for example). Dozens of open source projects can read and write  AMF.

The .swf format itself is not encrypted and a all decompilers will  let you extract ActionScript, which means a password stored in  ActionScript is neither more or less secure than a password stored in a  hidden field in HTML.

A variety of widely  available packet sniffers supporting AMF can still see and interpret the  AMF data sent through the wire.

The second myth is the converse, that Flash Remoting is inherently  less secure than traditional HTML applications. HTML applications are  basically built on a Remote Procedure Call model like Remoting, with the  caveat that the whole page is replaced instead of a small data being  sent and interpreted. There is a small complication in Flash coming from  the fact that the client is stateful, so you may think that this  enables you to trust the client's input; of course you should never  trust any client input.
<h3>Security for dummies</h3>
These security tips are not specific to amfPHP, but should always  be followed whenever developing a php or other client-server app:
<ul>
	<li>Don't attempt homebrew auth systems with cookies, use sessions</li>
	<li>Don't store anything sensitive on the client-side or send useless sensitive data</li>
	<li> Protect yourself against SQL injection</li>
	<li> Validate all user input</li>
	<li> Don't execute arbitrary code sent by the client</li>
	<li>Salt your passwords before md5'ing them and storing them in the db</li>
</ul>
<h3>amfPHP specific tips</h3>
Use the built-in authentication mechanism to log in or log out users, and protect them for accessing certain resources.

Be careful with return mysql_query(SELECT *) statements on tables  with sensitive data. For example, if you need to retrieve info about  some users, don't select all columns on the users table, as it may  contain the password as plain text or as an easily attackable unsalted  md5.

Be wary that amfphp acts as though magic_quotes_gpc was set to off  (the recommended setting). Always escape incoming strings using  mysql_real_escape_string before putting them in the database. Try  putting double quotes and single quotes in your input data to see if you  escaped all data correctly.

Be careful about including files based on strings sent by the user.  At a strict minimum, do a str_replace('../', '', $inputString); to make  sure the user isn't attempting to include an arbitrary file ouside of  the directory you had intended.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2011-03-15 17:46:33</wp:post_date>
		<wp:post_date_gmt>2011-03-15 17:46:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>security</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Deploying amfPHP</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=28</link>
		<pubDate>Tue, 15 Mar 2011 17:48:44 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=28</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Deploying amfPHP on a live server</h3>
It is possible that a service you developed locally will fail  remotely. Chances are the development environment will not mimic  perfectly the deployement environment.
<h3>Case sensitivity issues</h3>
Case-sensitivity issues. The filenames are  case-sensitive on Unix/Linux, but not on Windows, so if you are getting  errors such as âthe service does not existâ double check the names
<h3>crossdomain.xml - security sandbox issues</h3>
Since Flash 6, the Flash player implements a security sandbox. If  your swf file is located on one domain and the gateway.php file on  another, remote calls will fail. This is true of subdomains as well,  meaning you won't be able to call myserver.com from www.myserver.com.  The solution is to use a crossdomain.xml file.
<h3>mod_security issues</h3>
There have been reports that Apache installations with  mod_security enabled can cause issues. In particular, mod_security may  be set to disallow any unknown content-types, and amfPHP uses the  application/x-amf content type. In your Apache error log, this will show  up as:
<pre>mod_security: Access  denied with code 404. Pattern match  "!(^$|^application/x-www-form-urlencoded$|^multipart/form-data)" at  HEADER("Content-Type")
</pre>
The pattern match outlined above should be defined in   /etc/httpd/conf.d/mod_security.conf. If not there, it could be in  /etc/httpd/conf/httpd.conf. If not, you should be able to find it using
<pre>find <em>/etc/httpd/</em> -name "*security.conf"</pre>
You should find a line such as this:
<pre>SecFilterSelective HTTP_Content-Type  "!(^$|^application/x-www-form-urlencoded$|^multipart/form-data)"</pre>
Change it to:
<pre>SecFilterSelective HTTP_Content-Type  "!(^$|^application/x-www-form-urlencoded$|^application/x-amf|^multipart/form-data)"</pre>
Restart Apache and it should work. If you don't have global  access to the *.conf files, you may be able to achieve the same effect  with a .htaccess file in the amfphp diretory:
<pre>&lt;IfModule mod_security.c&gt;
    SecFilterSelective HTTP_Content-Type "!(^$|^application/x-www-form-urlencoded$|^application/x-amf|^multipart/form-data)"
&lt;/IfModule&gt;</pre>
<h3>IIS woes</h3>
There have been reports that amfphp may not work in IIS if  gateway.php and the services folder are set to 'read-only'. Make sure  you give full permissions to amfphp if you want it to work correctly on  IIS.
<h3>Securing amfPHP</h3>
<div>

If you do not want other sites to load your services (leeching)  and you are using Apache, you can set up a .htaccess file to redirect  undesirable calls to a dead-end. Read about using <a href="http://www.webmasterworld.com/forum92/2783.htm" target="_blank">mod_rewrite to stop leeching</a>.

TODO write about removing unnecessary plugins from production server

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2011-03-15 17:48:44</wp:post_date>
		<wp:post_date_gmt>2011-03-15 17:48:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>deploying-amfphp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using amfPHP with a new project</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=32</link>
		<pubDate>Tue, 15 Mar 2011 17:50:32 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=32</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- p { margin-bottom: 0.21cm; } -->In the distribution there is a folder called Â«Â AmfphpÂ Â». This is the main one, containing the code that you will actually use. For small projects that won't last long, you can add your services to the Â«Â ServicesÂ Â» folder.  There is however a problem with this approach: There is not a clear separation between your code and the Amfphp folder. This means for example that you need to be careful when upgrading.

If you would like to have a better separation, we suggest you take the time to change the configuration and make your own gateway.php file.

With the default gateway and configuration amfphp looks for its configuration in Amfphp/Config, its plugins in Amfphp/Plugins, and services in Amfphp/Services. You can make your own gateway.php script outside Amfphp, as well as a custom config class pointing to a custom plugins folder and a custom service folder.

In this script for example you would put:

$myConfig = new MyConfig();

$gateway = Amfphp_Core_HttpRequestGatewayFactory::createGateway($myConfig);

in MyConfig you would do something like the following:

$this-&gt;serviceFolderPaths [] = dirname(__FILE__) . "/MyServices/";

$this-&gt;pluginsFolder = dirname(__FILE__)  . "/Plugins/";

In this way if you need to upgrade Amfphp, you can just overwrite the old Amfphp folder with the new one.

We particularly recommend this approach for frameworks integrating Amfphp.

TODO this will change for the beta, 2 gateways will be available]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2011-03-15 17:50:32</wp:post_date>
		<wp:post_date_gmt>2011-03-15 17:50:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-amfphp-with-a-new-project</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Upgrading from amfPHP 1.9</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=34</link>
		<pubDate>Tue, 15 Mar 2011 17:51:11 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=34</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- p { margin-bottom: 0.21cm; } -->We have tried to find a compromise between writing good, consistent code for v2, and supporting services that were written for prior versions. The quick and dirty way to upgrade for small projects is to get rid of everything in your old amfphp folder that isn't yours, and replace it with the new files:
<ul>
	<li>Core folder</li>
	<li>Plugins folder</li>
	<li>ClassLoader.php and gateway.php</li>
</ul>
V2 comes with a Â«Â ServicesÂ Â» folder containing an example service. As for earlier versions everything was lower case, the default configuration comes with support for both Â«Â servicesÂ Â» and Â«Â ServicesÂ Â». Further versions will drop the lowercase version, but you can always add it manually if you really can't change its name.

Somewhere buried in the v1.9 code is a change of the current folder to the Services folder. This has an impact for using relative paths from the service classes. If you use relative paths, in the gateway.php file you will a commented line:

chdir(dirname(__FILE__) . "/services");

Uncomment this line if you have problems with relative paths. We do however encourage you to use absolute paths. These can be generated using dirname. See ClassLoader.php for an example.

Basic serialization works the same, however there are some changes regarding objects.
<ul>
	<li>Anonymous objects are now deserialized as objects, not 	arrays. So take for example in AS3 sending a simple object 	{userId:'user', password:'test password'}. In older versions, to get 	the userId, you would use the following syntax: obj['userId']. Now, 	this has changed to obj-&gt;userId.</li>
	<li>Typed objects used to be necessarily linked to a real class 	that would typically be in the Â«Â services/voÂ Â» folder. 	There was all kinds of messy code to deal with this. Now things are 	much simpler. If amfPHP receives a typed object, it created an 	anonymous object  where all the data is set, and the type is put in 	an additional reserved field:  Â« _explicitType Â». Furthermore, if 	you want to send back a typed object, all you have to do is set that 	same field on the object you return from your service and the client 	will receive a typed object. There is a plugin for using real 	classes contained in the old Â«Â services/voÂ Â» folder, 	AmfphpCharsetConverter, but you don't need to use it anymore to be 	able to use typed objects.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2011-03-15 17:51:11</wp:post_date>
		<wp:post_date_gmt>2011-03-15 17:51:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>upgrading-from-amfphp-1-9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Plugin System in amfPHP</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=36</link>
		<pubDate>Tue, 15 Mar 2011 17:53:11 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=36</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- p { margin-bottom: 0.21cm; } -->Amfphp has a system to allow developers to extend the core functionality. It is based around 2 concepts, neither of which are unique to Amfphp, but that have been adapted to the needs of the project. These 2 concepts are "plugins" and "filters".

Plugins are the extensions themselves. The system is designed so that they are easy to add, remove and configure.

- To add a plugin, copy its folder to the plugins folder of Amfphp. This is by default in Amfphp/Plugins, but can be changed in the configuration.

- To configure a plugin, use the pluginsConfig array in the configuration.

- To remove a plugin, delete it from the plugins folder.

Finally it is also possible to disable a plugin without removing it. You can learn more about these subjects in the configuration section.

Filters are the mechanism that is used by Amfphp to allow plugins to interact with it. The idea is that at several moments in the processing Amfphp allows plugins to access and to modify objects that pertain to the process. This is called filtering. For example, before processing the raw data contained in a request, Amfphp has a filter allowing plugins to filter it. This allows a logging plugin to save the data. Another example is that a plugin can override the default deserializer and deserialize a request itself. Filters in Amfphp are designed with a balance between functionality, ease of use and performance, in that order of priority.

Amfphp comes with some plugins already installed. Take a look in the Amfphp/Plugins folder to see what they are. 3rd party developers are encouraged to create plugins for Amfphp as we feel they add value to the platform.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2011-03-15 17:53:11</wp:post_date>
		<wp:post_date_gmt>2011-03-15 17:53:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-plugins-for-amfphp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Developing Plugins </title>
		<link>http://localhost:8888/amfphpdoc/?page_id=41</link>
		<pubDate>Tue, 15 Mar 2011 17:55:09 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=41</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- p { margin-bottom: 0.21cm; } -->The plugin must be a class. The Amfphp_Core_PluginManager class is responsable for including the PHP file and instanciating the plugin. The plugin receives an optional associative array containing values to override the default plugin configuration. This array is defined by the user in the general Amfphp configuration. The convention here is that the key is the name of the plugin parameter, and the value is the new value to set the parameter to. For example receiving [sourceUrl =&gt; "http://bla"] should set the plugin parameter "sourceUrl" to  "http://bla". This should be done in the constructor.

The second thing that must be done in the constructor is to register the plugin for Amfphp filters. This is done by getting the filter manager and calling its addFilter method. The first parameter is the name of the hook, the second the object on which to call the hook(typically the plugin, or "$this"), and the third is the name of the method to call. Here is a simple plugin example that filters the deserialized request.

&lt;?php

class TestPlugin {

&nbsp;

/**

* dummy parameter

* @var String

*/

public $sourceUrl;

/**

* constructor.

* @param array $config optional key/value pairs in an associative array. Used to override default configuration values.

*/

public function  __construct(array $config = null) {

//default

$this-&gt;sourceUrl = "";

if($config){

if(isset($config["sourceUrl"])){

$this-&gt;sourceUrl = $config["sourceUrl"];

}

}

$filterManager = Amfphp_Core_FilterManager::getInstance();

$filterManager-&gt;addFilter(Amfphp_Core_Gateway::FILTER_REQUEST_DESERIALIZED, $this, "filterRequestDeserialized");

}



/**

* sets deserialized request to "bla"

* @param mixed $deserializedRequest

* @return mixed

*/

public function requestDeserializedFilter($deserializedRequest){

return "bla";

}

}

?&gt;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2011-03-15 17:55:09</wp:post_date>
		<wp:post_date_gmt>2011-03-15 17:55:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>developing-plugins</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Naming Conventions and Coding Guidelines</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=43</link>
		<pubDate>Tue, 15 Mar 2011 17:55:46 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- p { margin-bottom: 0.21cm; } -->The amfPHP codebase was written bearing in mind that namespaces are useful to eliminate ambiguity, but that they are too recent to be used as a lot of shared hosting doesn't use PHP 5.3 yet. So namespaces are emulated. For example the Constants class that would be in the Amfphp/Core/Amf namespace is contained in the Amfphp/Core/Amf folder, the class is called Amfphp_Core_Amf_Constants, and the file is called Constants.php. Folders and classes are camel-cased, and start with a capital letter.

This convention applies everywhere except in the plugins folder. Third party plugins can be installed there, so the idea is to have &lt;author&gt;&lt;plugin description&gt; as the name for the plugin folder and the class that is contained. So for example for the authentication plugin that is proposed by Amfphp, the folder is called AmfphpAuthentication, the class is contained in AmfphpAuthentication.php, and the class is called  AmfphpAuthentication.

Filter names are defined by constants in the class where they are implemented, and an explanation of its use can be found there. The convention for naming the method called by the filter is to call it the same as the value of the filter constant. So for example the filter allowing a plugin to filter the serializer is defined with the following line of code:

const FILTER_SERIALIZER = "filterSerializer";

You should use "filterSerializer" as the name of the function.

The normal guidelines concerning the order of declarations in your class apply. This means first member variables, then the constructor, then the methods.

Please use phpdoc style comments to help other developers understand your plugin.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2011-03-15 17:55:46</wp:post_date>
		<wp:post_date_gmt>2011-03-15 17:55:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>naming-conventions-and-coding-guidelines</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Configuring Amfphp</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=45</link>
		<pubDate>Tue, 15 Mar 2011 17:56:14 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=45</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- p { margin-bottom: 0.21cm; } -->You can configure Amfphp by extending or modifying the Amfphp_Core_Config class, or changing the config object at runtime.
<ul>
	<li>Modifying it directly is the quick and dirty method, but it 	means that if it changes in future versions you will have more 	trouble upgrading.</li>
	<li>Changing the config at runtime is ok for small tweaks, and it 	won't bother you when upgrading. This can be done in your 	gateway.php script. To use the default config, the example 	gateway.php has the following line:

$gateway = 	Amfphp_Core_HttpRequestGatewayFactory::createGateway();

The createGateway method takes an optional configuration object 	as parameter. So replace it by

$config = new Amfphp_Core_Config();

//do something with config object here

$gateway = 	Amfphp_Core_HttpRequestGatewayFactory::createGateway($config);</li>
	<li>Extending the  Amfphp_Core_Config class to contain your own 	config is the cleanest way, but it takes a bit more effort. To do so 	create a Â«Â MyConfigÂ Â» class that inherits from 	Amfphp_Core_Config, and use the following code in the gateway.php 	script:

$myConfig = new MyConfig();

$gateway = 	Amfphp_Core_HttpRequestGatewayFactory::createGateway($myConfig);</li>
</ul>
&nbsp;

Here is what is currently configurable :
<ul>
	<li>service class location. You can modify 2 parameters to 	control this. You can either: add a folder containing any number of 	service classes. To do this add a path to that folder to 	Â«Â serviceFolderPathsÂ Â», or simply replace it.  Or you 	can just add a service class. This is for more advanced uses and 	gives you full control over the name of the service, the path of the 	file containing the class, and the name of the class itself. To do 	this add a Â«Â ClassFindInfoÂ Â» object to 	Â«Â serviceNames2ClassFindInfoÂ Â» For example:

$mirrorServicePath = dirname(__FILE__) . 	'/MirrorService.php';$mirrorServiceClassFindInfo = new 	Amfphp_Core_Common_ClassFindInfo($mirrorServicePath, 	"MirrorService");

$this-&gt;serviceNames2ClassFindInfo["MirrorService"] = 	"MirrorService" =&gt; $mirrorServiceClassFindInfo);

In both cases, use absolute paths, be careful of the case and in 	the case of folders finish with a Â«Â /Â Â».</li>
	<li>plugin location. Currently all plugins must be in the same 	folder, defined by Â«Â pluginsFolderÂ Â». The default is 	Amfphp/Plugins.</li>
	<li>plugin configuration. When plugins are instanciated they 	receive an associative array of values to which to set their 	parameters. So, to set the configuration of a plugin, add such an 	array to Â«Â pluginsConfigÂ Â» For example to change param1 	and param2 of TestPlugin, do this :

$this-&gt;pluginsConfig[Â«Â TestPluginÂ Â»] = {param1 =&gt; 	Â«Â value1Â Â», param2 =&gt;Â Â«Â value2Â Â»}</li>
	<li>plugins which are not loaded. If you want to disable a plugin 	but still keep it in your plugins folder, add its name to 	Â«Â disabledPluginsÂ Â».  For example:

$this-&gt;disabledPlugins[] = "AmfphpLogger";</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date>2011-03-15 17:56:14</wp:post_date>
		<wp:post_date_gmt>2011-03-15 17:56:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configuring-amfphp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Troubleshooting and Debugging your Project</title>
		<link>http://localhost:8888/amfphpdoc/?page_id=47</link>
		<pubDate>Tue, 15 Mar 2011 17:56:39 +0000</pubDate>
		<dc:creator>a</dc:creator>
		<guid isPermaLink="false">http://localhost:8888/amfphpdoc/?p=47</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- p { margin-bottom: 0.21cm; } -->We advise you to test your PHP code using purely PHP methods first. For this unit tests are very good. PHPUnit is the best PHP unit testing framework available at the time of writing. It bugs and freaks out if you throw anything complicated at it, but if you keep things simple it will work properly. Amfphp uses PHPUnit extensively.

Once you have done that, try your PHP code on a live server. You can open a browser tab at the gateway address, and if you have the QuickServiceDebug plugin you can try your services from there.

When a client makes a request to a service, you typically won't see the server response. Exceptions are caught and generate a well formed error message. However if you have an error in your PHP or your server runs into a configuration problem such as an unsupported function call, this can result in a badly formed response. If you are using Flash, will then run into the dreaded Â«Â bad versionÂ Â» response error, where the client can't parse the response. The first debugging tip is therefore to use a packet sniffer that can show you the server response. If you're using AMF, you'll need a packet sniffer that understands AMF. The lightweight and free option is Firefox + Firebug + Flashbug. For more serious use we highly recommend the shareware Charles Proxy. If you are not using AMF, a general purpose packet sniffer such as Ethereal will work too.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date>2011-03-15 17:56:39</wp:post_date>
		<wp:post_date_gmt>2011-03-15 17:56:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>troubleshooting-and-debugging-your-project</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
